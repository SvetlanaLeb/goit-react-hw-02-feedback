{"version":3,"sources":["components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","App.js","index.js","components/Statistics/Statistics.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","s","data","FeedbackOptions","options","countFeedback","map","type","button","onClick","toString","Section","title","children","section","container","Notification","message","App","state","props","handleBtnClick","setState","prevState","this","positiveFeedbackPercentage","Math","round","countTotalFeedback","countPositiveFeedbackPercentage","Component","defaultProps","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"iRAwBeA,EAtBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,8BACE,+BACE,6BACE,oBAAGC,UAAWC,IAAEC,KAAhB,mBAA6BP,EAA7B,SAEF,6BACE,oBAAGK,UAAWC,IAAEC,KAAhB,sBAAgCN,EAAhC,SAEF,6BACE,oBAAGI,UAAWC,IAAEC,KAAhB,kBAA4BL,EAA5B,SAEF,6BACE,oBAAGG,UAAWC,IAAEC,KAAhB,oBAA8BJ,EAA9B,SAEF,6BACE,oBAAGE,UAAWC,IAAEC,KAAhB,gCAA0CH,EAA1C,e,gBCCOI,EAjBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,cAAZ,OACtB,mCACGD,EAAQE,KAAI,SAAAC,GAAI,OACf,8BACE,wBAEEA,KAAK,SACLP,UAAS,UAAKC,IAAEO,OAAP,YAAiBP,IAAEM,IAC5BE,QAAS,kBAAMJ,EAAcE,IAJ/B,SAMGA,GALIA,EAAKG,oB,gBCSLC,EAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,yBAASb,UAAWC,IAAEa,QAAtB,SACE,sBAAKd,UAAWC,IAAEc,UAAlB,UACE,oBAAIf,UAAWC,IAAEW,MAAjB,SAAyBA,IACxBC,QCAQG,EALM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,4BAAIA,KCIpCC,E,4MAOJC,MAAQ,CACNxB,KAAM,EAAKyB,MAAMzB,KACjBC,QAAS,EAAKwB,MAAMxB,QACpBC,IAAK,EAAKuB,MAAMvB,K,EAGlBwB,eAAiB,SAAAd,GACf,EAAKe,UAAS,SAAAC,GACZ,OAAO,eAAGhB,EAAOgB,EAAUhB,GAAQ,O,wDAIvC,WACE,MAA+BiB,KAAKL,MACpC,OADA,EAAQxB,KAAR,EAAcC,QAAd,EAAuBC,M,6CAIzB,SAAgCF,EAAMG,GACpC,IAAI2B,EAA6B,EAIjC,OAHI9B,IACF8B,EAA6BC,KAAKC,MAAc,IAAPhC,EAAcG,IAElD2B,I,oBAGT,WACE,MAA+BD,KAAKL,MAA5BxB,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBC,EAAQ0B,KAAKI,qBACbH,EAA6BD,KAAKK,gCACxC,OACE,qCACE,cAAC,EAAD,CAASjB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACER,QAAS,CAAC,OAAQ,UAAW,OAC7BC,cAAemB,KAAKH,mBAGxB,cAAC,EAAD,CAAST,MAAO,aAAhB,SACGd,EACC,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoB0B,EAA2B9B,EAAMG,KAGvD,cAAC,EAAD,CAAcmB,QAAQ,wBAjB5B,W,GArCYa,aAAZZ,EACGa,aAAe,CACpBpC,KAAM,EACNC,QAAS,EACTC,IAAK,GA2DMqB,QChEfc,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U,kBCR1BC,EAAOC,QAAU,CAAC,KAAO,2B,kBCAzBD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,MAAQ,uBAAuB,UAAY,6B,kBCAhGD,EAAOC,QAAU,CAAC,OAAS,gCAAgC,KAAO,8BAA8B,QAAU,iCAAiC,IAAM,gC","file":"static/js/main.989068c9.chunk.js","sourcesContent":["import s from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n  <div>\r\n    <ul>\r\n      <li>\r\n        <p className={s.data}>Good: {good}%</p>\r\n      </li>\r\n      <li>\r\n        <p className={s.data}>Neutral: {neutral}%</p>\r\n      </li>\r\n      <li>\r\n        <p className={s.data}>Bad: {bad}%</p>\r\n      </li>\r\n      <li>\r\n        <p className={s.data}>Total: {total}%</p>\r\n      </li>\r\n      <li>\r\n        <p className={s.data}>Positive feedback: {positivePercentage}%</p>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Statistics;\r\n","import s from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, countFeedback }) => (\r\n  <>\r\n    {options.map(type => (\r\n      <div>\r\n        <button\r\n          key={type.toString()}\r\n          type=\"button\"\r\n          className={`${s.button} ${s[type]}`}\r\n          onClick={() => countFeedback(type)}\r\n        >\r\n          {type}\r\n        </button>\r\n      </div>\r\n    ))}\r\n  </>\r\n);\r\n\r\nexport default FeedbackOptions;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => (\r\n  <section className={s.section}>\r\n    <div className={s.container}>\r\n      <h2 className={s.title}>{title}</h2>\r\n      {children}\r\n    </div>\r\n  </section>\r\n);\r\n\r\nSection.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => <p>{message}</p>;\r\nNotification.propTypes = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\nimport Statistics from './components/Statistics/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions';\nimport Section from './components/Section/Section';\nimport Notification from './components/Notification/Notification';\n\nclass App extends Component {\n  static defaultProps = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  state = {\n    good: this.props.good,\n    neutral: this.props.neutral,\n    bad: this.props.bad,\n  };\n\n  handleBtnClick = type => {\n    this.setState(prevState => {\n      return { [type]: prevState[type] + 1 };\n    });\n  };\n\n  countTotalFeedback() {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  }\n\n  countPositiveFeedbackPercentage(good, total) {\n    let positiveFeedbackPercentage = 0;\n    if (good) {\n      positiveFeedbackPercentage = Math.round((good * 100) / total);\n    }\n    return positiveFeedbackPercentage;\n  }\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positiveFeedbackPercentage = this.countPositiveFeedbackPercentage;\n    return (\n      <>\n        <Section title={'Please leave feedback'}>\n          <FeedbackOptions\n            options={['good', 'neutral', 'bad']}\n            countFeedback={this.handleBtnClick}\n          />\n        </Section>\n        <Section title={'Statistics'}>\n          {total ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              positivePercentage={positiveFeedbackPercentage(good, total)}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n        )\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"data\":\"Statistics_data__1jreb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__1hsSq\",\"title\":\"Section_title__3tNnY\",\"container\":\"Section_container__5iHA1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__185ZG\",\"good\":\"FeedbackOptions_good__36sBZ\",\"neutral\":\"FeedbackOptions_neutral__2YQqz\",\"bad\":\"FeedbackOptions_bad__GUCK1\"};"],"sourceRoot":""}